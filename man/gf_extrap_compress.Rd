% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gradientforest_ext.R
\name{gf_extrap_compress}
\alias{gf_extrap_compress}
\title{Compress extremes non-linearly}
\usage{
gf_extrap_compress(gf, env_grid, power)
}
\arguments{
\item{gf}{A gradientForest or combinedGradientForest object}

\item{env_grid}{Data.frame of environmental predictors to predict}

\item{power}{numeric in range [0, 1]. Extremes will be raised to this power, eg 1/4 takes the 4th root. 0 corresponds to capping, 1 corresponds to linear extrapolation.}
}
\value{
Data.frame of transformed environmental predictors
}
\description{
Takes a Gradient Forest (GF) object and a
data.frame of environmental predictors
that are ready to be passed to
predict.gradientForest.
}
\details{
This function finds the upper and lower
limits sampled by the GF object. Any prection
sites with a value outside of the range is compressed
to sit between capping (extreme prediction is identical
to max sampled prediction) and linear extrapolation.
}
\examples{

if (requireNamespace("gradientForest", quietly = TRUE)) {
library(gradientForest) #required to attach extendedForest
#8 species,
#9 env vars
#100 sample sites ranging from 1 to 2
#1000 grid sites ranging from 0 to 3
#poisson dependency on env vars

set.seed(1000)
species_dep <- matrix(runif(72, -10, 20), 9, 8)

env_samp <- matrix(runif(900, 1, 2), 100, 9)


species_response <- env_samp \%*\% species_dep
species_abundance <- data.frame(matrix(rpois(length(as.vector(species_response)), as.vector(species_response)), 100, 8))
names(species_abundance) <- LETTERS[1:8]
env_samp <- as.data.frame(env_samp)
names(env_samp) <- letters[1:9]


gf <- gradientForest::gradientForest(
    cbind(env_samp, species_abundance),
    letters[1:9],
    LETTERS[1:8]
)

env_grid_upper <- matrix(runif(9000, 1, 3), 1000, 9)
env_grid_upper <- as.data.frame(env_grid_upper)
names(env_grid_upper) <- letters[1:9]
env_grid_lower <- matrix(runif(9000, 0, 2), 1000, 9)
env_grid_lower <- as.data.frame(env_grid_lower)
names(env_grid_lower) <- letters[1:9]

#Testing upper extremes
##Capping
pred_cap <- predict(gf, env_grid_upper, extrap = FALSE)
compress_cap <- gf_extrap_compress(gf, env_grid_upper, 0)
testthat::expect_equal(as.data.frame(pred_cap), as.data.frame(compress_cap))

##Extrapolating
pred_extrap <- predict(gf, env_grid_upper, extrap = FALSE)
compress_extrap <- gf_extrap_compress(gf, env_grid_upper, 1)
testthat::expect_equal(as.data.frame(pred_cap), as.data.frame(compress_cap))

##Compression
compress_compress <- gf_extrap_compress(gf, env_grid_upper, 0.25)
#Here, extremes should lie between pred_cap and pred_extrap
testthat::expect_true(all(compress_compress >= pred_cap & compress_compress <= pred_extrap))

#' #Testing lower extremes
##Capping
pred_cap <- predict(gf, env_grid_lower, extrap = FALSE)
compress_cap <- gf_extrap_compress(gf, env_grid_lower, 0)
testthat::expect_equal(as.data.frame(pred_cap), as.data.frame(compress_cap))

##Extrapolating
pred_extrap <- predict(gf, env_grid_lower, extrap = FALSE)
compress_extrap <- gf_extrap_compress(gf, env_grid_lower, 1)
testthat::expect_equal(as.data.frame(pred_cap), as.data.frame(compress_cap))

##Compression
compress_compress <- gf_extrap_compress(gf, env_grid_lower, 0.25)
#Here, extremes should lie between pred_cap and pred_extrap
testthat::expect_true(all(compress_compress <= pred_cap & compress_compress >= pred_extrap))

testthat::expect_error(gf_extrap_compress(gf, env_grid_lower, -1), "gf_extrap_compress: power must lie between 0 and 1")
testthat::expect_error(gf_extrap_compress(gf, env_grid_lower, 1.1), "gf_extrap_compress: power must lie between 0 and 1")

}

}
