% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gradientforest_ext.R
\name{cluster_range}
\alias{cluster_range}
\title{Calculate a range of k-medoid clusterings}
\usage{
cluster_range(x, k, rep = 1, parallel = TRUE, ...)
}
\arguments{
\item{x}{dataset to cluster, passed to cluster::clara}

\item{k}{integer vector, each element will create a fitting with k[i] clusters}

\item{rep}{number of replicates for each element of k (redundant for clara?)}

\item{parallel}{boolean. Allow parallel excecution. Requires a foreach registerDo*() backend to be set. doFuture::registerDoFuture() is recommended for flexibility.}

\item{...}{arguments passed to clara}
}
\value{
list of cluster::clara objects, NOT ordered with respect to k vector or rep.
}
\description{
Uses the clara method to find clusterings for a dataset, but fits a range of k and will run in parallel if either a foreach registerDo*() backend is set or
future::plan() is set.
}
\examples{
set.seed(1000)

samples <- cluster::xclara

test_one  <- cluster_range(samples, k = c(2), rep = 1, parallel = FALSE)
testthat::expect_equal(class(test_one), "list")
testthat::expect_equal(class(test_one[[1]]), c("clara", "partition"))
plot(test_one[[1]], which.plot = 1)

testthat::expect_error(cluster_range(x, k = c(2), rep = 1, parallel = FALSE, not_a_param = TRUE), "unused argument (not_a_param = TRUE)", fixed = TRUE)

test_many <- cluster_range(samples, k = 2:10, rep = 1, parallel = FALSE) #this is also a test, because it can fail
testthat::expect_equal(class(test_many), "list")
testthat::expect_true(all(sapply(test_many, function(x){class(x) == c("clara", "partition")})))
testthat::expect_equal(length(test_many), length(2:10))

test_many_reps <- cluster_range(samples, k = 2:10, rep = 5, parallel = FALSE)

testthat::expect_equal(class(test_many_reps), "list")
testthat::expect_true(all(sapply(test_many_reps, function(x){class(x) == c("clara", "partition")})))
testthat::expect_equal(length(test_many_reps), length(2:10)*5)

k_set <- sapply(test_many_reps, function(x){length(x$i.med)})
testthat::expect_equal(sort(k_set), sort(rep(2:10, 5)))

#Parallel aware

if (requireNamespace("future", quietly = TRUE) & requireNamespace("doFuture", quietly = TRUE)) {
library(future)
library(doFuture)
doFuture::registerDoFuture()

future::plan(multisession, workers = 2)

testthat::expect_gt(system.time( cluster_range(samples, k = 4, rep = 4, samples = 500, parallel = FALSE))[1],
              system.time(cluster_range(samples, k = 4, rep = 4, samples = 500, parallel = TRUE))[1])
}
}
